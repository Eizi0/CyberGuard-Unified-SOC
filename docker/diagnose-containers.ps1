# Script de diagnostic PowerShell pour Velociraptor et Shuffle
# ===========================================================

param(
    [switch]$Verbose,
    [switch]$FixPermissions,
    [switch]$Rebuild
)

function Write-Header {
    param($Message)
    Write-Host "`n" -NoNewline
    Write-Host "=" * 50 -ForegroundColor Cyan
    Write-Host " $Message" -ForegroundColor Yellow
    Write-Host "=" * 50 -ForegroundColor Cyan
}

function Test-DockerService {
    param($ServiceName, $ContainerName, $Port, $HealthEndpoint = "/health")
    
    Write-Header "Diagnostic $ServiceName ($ContainerName)"
    
    # V√©rifier si le conteneur existe
    $containerExists = docker ps -a --format "{{.Names}}" | Where-Object { $_ -eq $ContainerName }
    
    if ($containerExists) {
        Write-Host "‚úÖ Conteneur trouv√©: $ContainerName" -ForegroundColor Green
        
        # V√©rifier l'√©tat
        $containerStatus = docker inspect --format='{{.State.Status}}' $ContainerName 2>$null
        Write-Host "üìä √âtat: $containerStatus" -ForegroundColor Blue
        
        if ($containerStatus -eq "running") {
            Write-Host "‚úÖ Conteneur en cours d'ex√©cution" -ForegroundColor Green
            
            # Tester la connectivit√©
            try {
                $response = Invoke-WebRequest -Uri "http://localhost:$Port$HealthEndpoint" -TimeoutSec 5 -ErrorAction Stop
                Write-Host "‚úÖ Service accessible sur le port $Port" -ForegroundColor Green
            }
            catch {
                Write-Host "‚ùå Service non accessible sur le port $Port" -ForegroundColor Red
                Write-Host "   Erreur: $($_.Exception.Message)" -ForegroundColor Yellow
            }
            
        } elseif ($containerStatus -eq "exited") {
            Write-Host "‚ùå Conteneur arr√™t√©" -ForegroundColor Red
            Write-Host "üìú Derniers logs:" -ForegroundColor Yellow
            docker logs --tail 10 $ContainerName
            
        } else {
            Write-Host "‚ö†Ô∏è  √âtat inconnu: $containerStatus" -ForegroundColor Yellow
        }
        
    } else {
        Write-Host "‚ùå Conteneur non trouv√©: $ContainerName" -ForegroundColor Red
    }
}

function Test-FileStructure {
    Write-Header "V√©rification de la structure des fichiers"
    
    $files = @(
        @{ Path = "velociraptor\Dockerfile"; Name = "Velociraptor Dockerfile" },
        @{ Path = "velociraptor\config\server.config.yaml"; Name = "Velociraptor Config" },
        @{ Path = "velociraptor\init-velociraptor.sh"; Name = "Velociraptor Init Script" },
        @{ Path = "shuffle\Dockerfile"; Name = "Shuffle Dockerfile" },
        @{ Path = "shuffle\config\shuffle-config.yaml"; Name = "Shuffle Config" },
        @{ Path = "shuffle\init-shuffle.sh"; Name = "Shuffle Init Script" }
    )
    
    foreach ($file in $files) {
        if (Test-Path $file.Path) {
            Write-Host "‚úÖ $($file.Name)" -ForegroundColor Green
            if ($Verbose) {
                $size = (Get-Item $file.Path).Length
                Write-Host "   Taille: $size bytes" -ForegroundColor Gray
            }
        } else {
            Write-Host "‚ùå $($file.Name) - $($file.Path)" -ForegroundColor Red
        }
    }
}

function Test-DockerEnvironment {
    Write-Header "Environnement Docker"
    
    # V√©rifier Docker
    try {
        $dockerVersion = docker --version 2>$null
        Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Docker non install√© ou non accessible" -ForegroundColor Red
        return $false
    }
    
    # V√©rifier Docker Compose
    try {
        $composeVersion = docker-compose --version 2>$null
        Write-Host "‚úÖ Docker Compose: $composeVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Docker Compose non install√©" -ForegroundColor Red
    }
    
    # V√©rifier le daemon Docker
    try {
        docker info 2>$null | Out-Null
        Write-Host "‚úÖ Docker daemon accessible" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Docker daemon non accessible" -ForegroundColor Red
        return $false
    }
}

function Show-ContainerSummary {
    Write-Header "R√©sum√© des conteneurs"
    
    Write-Host "Conteneurs li√©s √† Velociraptor et Shuffle:" -ForegroundColor Blue
    docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | Select-String -Pattern "(velociraptor|shuffle)"
    
    Write-Host "`nTous les conteneurs:" -ForegroundColor Blue
    docker ps -a --format "table {{.Names}}\t{{.Status}}"
}

function Fix-Permissions {
    Write-Header "Correction des permissions"
    
    if ($FixPermissions) {
        Write-Host "üîß Correction des permissions des scripts..." -ForegroundColor Blue
        
        $scripts = @(
            "velociraptor\init-velociraptor.sh",
            "shuffle\init-shuffle.sh"
        )
        
        foreach ($script in $scripts) {
            if (Test-Path $script) {
                # Sur Windows, on ne peut pas vraiment changer les permissions Unix
                # mais on peut v√©rifier que le fichier existe et est lisible
                Write-Host "‚úÖ Script trouv√©: $script" -ForegroundColor Green
            }
        }
    }
}

function Rebuild-Images {
    if ($Rebuild) {
        Write-Header "Reconstruction des images"
        
        Write-Host "üî® Reconstruction de l'image Velociraptor..." -ForegroundColor Blue
        docker-compose build velociraptor
        
        Write-Host "üî® Reconstruction de l'image Shuffle..." -ForegroundColor Blue
        docker-compose build shuffle
        
        Write-Host "‚úÖ Images reconstruites" -ForegroundColor Green
    }
}

function Show-TroubleshootingCommands {
    Write-Header "Commandes de d√©pannage"
    
    Write-Host "üìã Commandes utiles:" -ForegroundColor Blue
    Write-Host ""
    Write-Host "Reconstruire les images:" -ForegroundColor Yellow
    Write-Host "  docker-compose build velociraptor shuffle" -ForegroundColor White
    Write-Host ""
    Write-Host "Red√©marrer les services:" -ForegroundColor Yellow
    Write-Host "  docker-compose restart velociraptor shuffle" -ForegroundColor White
    Write-Host ""
    Write-Host "Voir les logs:" -ForegroundColor Yellow
    Write-Host "  docker-compose logs velociraptor" -ForegroundColor White
    Write-Host "  docker-compose logs shuffle" -ForegroundColor White
    Write-Host ""
    Write-Host "D√©marrer en mode debug:" -ForegroundColor Yellow
    Write-Host "  docker-compose up velociraptor shuffle" -ForegroundColor White
    Write-Host ""
    Write-Host "Arr√™ter et supprimer les conteneurs:" -ForegroundColor Yellow
    Write-Host "  docker-compose down" -ForegroundColor White
    Write-Host "  docker-compose up -d velociraptor shuffle" -ForegroundColor White
}

# Main execution
Write-Host "üõ°Ô∏è  CyberGuard Unified SOC - Diagnostic Velociraptor & Shuffle" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan

# V√©rifier l'environnement Docker
if (-not (Test-DockerEnvironment)) {
    Write-Host "‚ùå Environnement Docker non disponible. Installation requise." -ForegroundColor Red
    exit 1
}

# V√©rifier la structure des fichiers
Test-FileStructure

# Corriger les permissions si demand√©
Fix-Permissions

# Reconstruire les images si demand√©
Rebuild-Images

# Tester les services
Test-DockerService "Velociraptor" "velociraptor" "8889"
Test-DockerService "Shuffle" "shuffle" "3443"

# R√©sum√© des conteneurs
Show-ContainerSummary

# Commandes de d√©pannage
Show-TroubleshootingCommands

Write-Host "`n‚úÖ Diagnostic termin√©" -ForegroundColor Green
Write-Host "üí° Utilisez les commandes ci-dessus pour r√©soudre les probl√®mes identifi√©s" -ForegroundColor Blue
