# üîç D√©tection automatique des ressources et s√©lection du profil optimal
# CyberGuard Unified SOC - Auto Profile Selector

Write-Host "üîç D√©tection des ressources syst√®me..." -ForegroundColor Cyan

# Fonction pour obtenir la RAM totale en GB
function Get-TotalRAMInGB {
    $totalRAM = (Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory
    return [Math]::Round($totalRAM / 1GB, 1)
}

# Fonction pour obtenir la RAM disponible en GB
function Get-AvailableRAMInGB {
    $availableRAM = (Get-WmiObject -Class Win32_OperatingSystem).FreePhysicalMemory * 1KB
    return [Math]::Round($availableRAM / 1GB, 1)
}

# Fonction pour obtenir le nombre de c≈ìurs CPU
function Get-CPUCores {
    return (Get-WmiObject -Class Win32_Processor | Measure-Object -Property NumberOfCores -Sum).Sum
}

# Fonction pour obtenir l'espace disque disponible
function Get-AvailableDiskSpaceInGB {
    $disk = Get-WmiObject -Class Win32_LogicalDisk | Where-Object { $_.DeviceID -eq "C:" }
    return [Math]::Round($disk.FreeSpace / 1GB, 1)
}

# D√©tection des ressources
$totalRAM = Get-TotalRAMInGB
$availableRAM = Get-AvailableRAMInGB
$cpuCores = Get-CPUCores
$diskSpace = Get-AvailableDiskSpaceInGB

Write-Host "üìä Ressources syst√®me d√©tect√©es :" -ForegroundColor Yellow
Write-Host "   üíæ RAM Totale : $totalRAM GB" -ForegroundColor Green
Write-Host "   üíæ RAM Disponible : $availableRAM GB" -ForegroundColor Green
Write-Host "   üñ•Ô∏è  C≈ìurs CPU : $cpuCores" -ForegroundColor Green
Write-Host "   üíø Espace Disque : $diskSpace GB" -ForegroundColor Green
Write-Host ""

# Recommandation de profil bas√©e sur les ressources
$recommendedProfile = ""
$configFile = ""
$warnings = @()

if ($totalRAM -ge 16 -and $cpuCores -ge 8 -and $diskSpace -ge 100) {
    $recommendedProfile = "üöÄ COMPLET"
    $configFile = "docker-compose.yml"
    Write-Host "‚úÖ Recommandation : Profil COMPLET" -ForegroundColor Green
    Write-Host "   Tous les 9 outils de s√©curit√© seront d√©ploy√©s" -ForegroundColor White
} elseif ($totalRAM -ge 8 -and $cpuCores -ge 6 -and $diskSpace -ge 50) {
    $recommendedProfile = "‚ö° MINIMAL"
    $configFile = "docker-compose.minimal.yml"
    Write-Host "‚ö†Ô∏è  Recommandation : Profil MINIMAL" -ForegroundColor Yellow
    Write-Host "   Services core + outils essentiels de s√©curit√©" -ForegroundColor White
    if ($totalRAM -lt 12) { $warnings += "RAM limit√©e - performances r√©duites possibles" }
} elseif ($totalRAM -ge 4 -and $cpuCores -ge 4 -and $diskSpace -ge 25) {
    $recommendedProfile = "üèÅ D√âVELOPPEMENT"
    $configFile = "docker-compose.dev.yml"
    Write-Host "‚ö†Ô∏è  Recommandation : Profil D√âVELOPPEMENT" -ForegroundColor Orange
    Write-Host "   Services essentiels uniquement pour tests" -ForegroundColor White
    $warnings += "Configuration limit√©e - non recommand√©e pour production"
    if ($totalRAM -lt 6) { $warnings += "RAM tr√®s limit√©e - instabilit√© possible" }
} else {
    Write-Host "‚ùå ERREUR : Ressources insuffisantes" -ForegroundColor Red
    Write-Host "   Minimum requis : 4GB RAM, 4 CPU cores, 25GB disque" -ForegroundColor Red
    Write-Host ""
    Write-Host "üõ†Ô∏è  Solutions recommand√©es :" -ForegroundColor Yellow
    Write-Host "   1. Augmenter la RAM √† 8GB minimum" -ForegroundColor White
    Write-Host "   2. Utiliser une VM avec plus de ressources" -ForegroundColor White
    Write-Host "   3. D√©ployer sur un serveur d√©di√©" -ForegroundColor White
    exit 1
}

# Affichage des avertissements
if ($warnings.Count -gt 0) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Avertissements :" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "   ‚Ä¢ $warning" -ForegroundColor Orange
    }
}

Write-Host ""
Write-Host "üéØ Profil recommand√© : $recommendedProfile" -ForegroundColor Cyan
Write-Host "üìÑ Fichier de configuration : $configFile" -ForegroundColor White

# Menu de choix
Write-Host ""
Write-Host "Que souhaitez-vous faire ?" -ForegroundColor Yellow
Write-Host "1. üöÄ D√©ployer avec le profil recommand√©" -ForegroundColor Green
Write-Host "2. üîß Choisir un autre profil manuellement" -ForegroundColor Blue
Write-Host "3. üìä Voir les d√©tails des profils" -ForegroundColor Cyan
Write-Host "4. ‚ùå Annuler" -ForegroundColor Red

$choice = Read-Host "Votre choix (1-4)"

switch ($choice) {
    "1" {
        Write-Host ""
        Write-Host "üöÄ D√©ploiement du profil $recommendedProfile..." -ForegroundColor Green
        
        # Navigation intelligente vers le dossier docker
        if (Test-Path "docker") {
            Set-Location "docker"
        } elseif (Test-Path "..\docker") {
            Set-Location "..\docker"
        } else {
            Write-Host "‚ùå Erreur : Dossier docker non trouv√©" -ForegroundColor Red
            Write-Host "   Assurez-vous d'√™tre dans le projet CyberGuard" -ForegroundColor White
            exit 1
        }
        
        # V√©rifier si Docker est d√©marr√©
        try {
            docker version | Out-Null
            Write-Host "‚úÖ Docker est op√©rationnel" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur : Docker n'est pas d√©marr√©" -ForegroundColor Red
            Write-Host "   Veuillez d√©marrer Docker Desktop et r√©essayer" -ForegroundColor White
            exit 1
        }
        
        # D√©ployer avec le profil recommand√©
        docker-compose -f $configFile up -d
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host ""
            Write-Host "‚úÖ D√©ploiement r√©ussi !" -ForegroundColor Green
            Write-Host ""
            Write-Host "üåê Acc√®s aux services :" -ForegroundColor Cyan
            Write-Host "   Frontend : http://localhost:3000" -ForegroundColor White
            Write-Host "   Backend API : http://localhost:8000" -ForegroundColor White
            if ($configFile -ne "docker-compose.dev.yml") {
                Write-Host "   Graylog : http://localhost:9000" -ForegroundColor White
                Write-Host "   Wazuh : http://localhost:55000" -ForegroundColor White
            }
            
            Write-Host ""
            Write-Host "üìù Commandes utiles :" -ForegroundColor Yellow
            Write-Host "   docker-compose -f $configFile ps" -ForegroundColor Gray
            Write-Host "   docker-compose -f $configFile logs -f" -ForegroundColor Gray
            Write-Host "   docker-compose -f $configFile down" -ForegroundColor Gray
        } else {
            Write-Host "‚ùå Erreur lors du d√©ploiement" -ForegroundColor Red
            Write-Host "   Consultez les logs : docker-compose -f $configFile logs" -ForegroundColor White
        }
    }
    
    "2" {
        Write-Host ""
        Write-Host "üîß S√©lection manuelle du profil :" -ForegroundColor Blue
        Write-Host "1. üèÅ D√©veloppement (4-8GB) - docker-compose.dev.yml" -ForegroundColor White
        Write-Host "2. ‚ö° Minimal (8-12GB) - docker-compose.minimal.yml" -ForegroundColor White
        Write-Host "3. üöÄ Complet (16GB+) - docker-compose.yml" -ForegroundColor White
        
        $manualChoice = Read-Host "Choisissez un profil (1-3)"
        
        $manualFiles = @{
            "1" = "docker-compose.dev.yml"
            "2" = "docker-compose.minimal.yml" 
            "3" = "docker-compose.yml"
        }
        
        if ($manualFiles.ContainsKey($manualChoice)) {
            $selectedFile = $manualFiles[$manualChoice]
            Write-Host "üìÑ Profil s√©lectionn√© : $selectedFile" -ForegroundColor Green
            
            # Navigation intelligente vers le dossier docker
            if (Test-Path "docker") {
                Set-Location "docker"
            } elseif (Test-Path "..\docker") {
                Set-Location "..\docker"
            } else {
                Write-Host "‚ùå Erreur : Dossier docker non trouv√©" -ForegroundColor Red
                exit 1
            }
            
            docker-compose -f $selectedFile up -d
        } else {
            Write-Host "‚ùå Choix invalide" -ForegroundColor Red
        }
    }
    
    "3" {
        Write-Host ""
        Write-Host "üìä D√©tails des profils disponibles :" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "üèÅ D√âVELOPPEMENT (docker-compose.dev.yml)" -ForegroundColor Yellow
        Write-Host "   RAM : 4-8GB | CPU : 4+ cores | Disque : 25GB" -ForegroundColor Gray
        Write-Host "   Services : Frontend, Backend, MongoDB, Elasticsearch, Wazuh, Graylog" -ForegroundColor Gray
        Write-Host "   Usage : Tests, d√©monstrations, d√©veloppement" -ForegroundColor Gray
        Write-Host ""
        Write-Host "‚ö° MINIMAL (docker-compose.minimal.yml)" -ForegroundColor Yellow
        Write-Host "   RAM : 8-12GB | CPU : 6+ cores | Disque : 50GB" -ForegroundColor Gray
        Write-Host "   Services : Core + TheHive, configurations optimis√©es m√©moire" -ForegroundColor Gray
        Write-Host "   Usage : PME, environnements contraints, POC" -ForegroundColor Gray
        Write-Host ""
        Write-Host "üöÄ COMPLET (docker-compose.yml)" -ForegroundColor Yellow
        Write-Host "   RAM : 16GB+ | CPU : 8+ cores | Disque : 100GB+" -ForegroundColor Gray
        Write-Host "   Services : Tous les 9 outils (Wazuh, Graylog, TheHive, MISP, OpenCTI, etc.)" -ForegroundColor Gray
        Write-Host "   Usage : Production, SOC complet, entreprise" -ForegroundColor Gray
        
        Write-Host ""
        Read-Host "Appuyez sur Entr√©e pour continuer"
        
        # Relancer le script
        & $MyInvocation.MyCommand.Path
    }
    
    "4" {
        Write-Host "‚ùå Annulation du d√©ploiement" -ForegroundColor Red
        exit 0
    }
    
    default {
        Write-Host "‚ùå Choix invalide" -ForegroundColor Red
        exit 1
    }
}
