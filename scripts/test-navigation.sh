#!/bin/bash

# Test de navigation intelligente pour tous les scripts
# V√©rifie que les scripts fonctionnent depuis la racine ET depuis le dossier scripts

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚Ñπ $1${NC}"
}

# V√©rification de la position actuelle
detect_location() {
    if [ -f "README.md" ] && [ -d "scripts" ] && [ -d "docker" ]; then
        echo "root"
    elif [ -f "../README.md" ] && [ -d "../scripts" ] && [ -d "../docker" ]; then
        echo "scripts"
    else
        echo "unknown"
    fi
}

# Test de navigation vers docker
test_docker_navigation() {
    local test_name="$1"
    local start_location="$2"
    
    print_info "Test: $test_name (depuis $start_location)"
    
    # Sauvegarder la position actuelle
    local original_dir=$(pwd)
    
    if [ -d "docker" ]; then
        print_success "Navigation vers ./docker r√©ussie"
        local docker_files=$(ls docker/docker-compose*.yml 2>/dev/null | wc -l)
        if [ $docker_files -ge 3 ]; then
            print_success "Fichiers docker-compose trouv√©s: $docker_files"
        else
            print_error "Fichiers docker-compose manquants: $docker_files trouv√©(s)"
        fi
    elif [ -d "../docker" ]; then
        print_success "Navigation vers ../docker r√©ussie"
        local docker_files=$(ls ../docker/docker-compose*.yml 2>/dev/null | wc -l)
        if [ $docker_files -ge 3 ]; then
            print_success "Fichiers docker-compose trouv√©s: $docker_files"
        else
            print_error "Fichiers docker-compose manquants: $docker_files trouv√©(s)"
        fi
    else
        print_error "Dossier docker non trouv√©"
        return 1
    fi
    
    # Retourner √† la position d'origine
    cd "$original_dir"
    return 0
}

# Test depuis la racine
test_from_root() {
    print_header "TEST DEPUIS LA RACINE DU PROJET"
    
    if [ "$(detect_location)" != "root" ]; then
        # Essayer de naviguer vers la racine
        if [ -f "../README.md" ] && [ -d "../scripts" ]; then
            cd ..
        else
            print_error "Impossible de localiser la racine du projet"
            return 1
        fi
    fi
    
    local current_location=$(detect_location)
    if [ "$current_location" = "root" ]; then
        print_success "Positionnement √† la racine confirm√©"
        test_docker_navigation "Navigation depuis racine" "racine"
    else
        print_error "Position racine non confirm√©e"
        return 1
    fi
}

# Test depuis le dossier scripts
test_from_scripts() {
    print_header "TEST DEPUIS LE DOSSIER SCRIPTS"
    
    # Naviguer vers le dossier scripts
    if [ -d "scripts" ]; then
        cd scripts
    elif [ "$(detect_location)" = "scripts" ]; then
        print_success "D√©j√† dans le dossier scripts"
    else
        print_error "Impossible de naviguer vers le dossier scripts"
        return 1
    fi
    
    local current_location=$(detect_location)
    if [ "$current_location" = "scripts" ]; then
        print_success "Positionnement dans scripts/ confirm√©"
        test_docker_navigation "Navigation depuis scripts" "scripts"
    else
        print_error "Position scripts non confirm√©e"
        return 1
    fi
}

# Test de cr√©ation du dossier backups
test_backups_creation() {
    print_header "TEST CR√âATION DOSSIER BACKUPS"
    
    # Sauvegarder la position
    local original_dir=$(pwd)
    
    # Test depuis la racine
    if [ "$(detect_location)" != "root" ]; then
        cd ..
    fi
    
    if [ ! -d "backups" ]; then
        print_info "Tentative de cr√©ation du dossier backups"
        mkdir -p backups 2>/dev/null
        if [ -d "backups" ]; then
            print_success "Dossier backups cr√©√© avec succ√®s"
            rmdir backups 2>/dev/null  # Nettoyage
        else
            print_error "Impossible de cr√©er le dossier backups"
        fi
    else
        print_success "Dossier backups existe d√©j√†"
    fi
    
    # Test depuis scripts
    cd scripts 2>/dev/null || true
    if [ "$(detect_location)" = "scripts" ]; then
        if [ ! -d "../backups" ]; then
            print_info "Tentative de cr√©ation de ../backups depuis scripts"
            mkdir -p ../backups 2>/dev/null
            if [ -d "../backups" ]; then
                print_success "Dossier ../backups cr√©√© avec succ√®s"
                rmdir ../backups 2>/dev/null  # Nettoyage
            else
                print_error "Impossible de cr√©er ../backups"
            fi
        else
            print_success "Dossier ../backups accessible"
        fi
    fi
    
    cd "$original_dir"
}

# Test des scripts d'automatisation
test_automation_scripts() {
    print_header "TEST DES SCRIPTS D'AUTOMATISATION"
    
    local scripts_to_test=("test-structure.sh" "auto-deploy.sh" "health-check.sh")
    
    for script in "${scripts_to_test[@]}"; do
        if [ -f "scripts/$script" ]; then
            print_success "Script trouv√©: $script"
            
            # V√©rifier la syntaxe bash
            if bash -n "scripts/$script" 2>/dev/null; then
                print_success "Syntaxe valide: $script"
            else
                print_error "Erreur de syntaxe: $script"
            fi
        else
            print_error "Script manquant: $script"
        fi
    done
}

# Ex√©cution des tests
main() {
    print_header "TEST DE NAVIGATION INTELLIGENTE - CYBERGUARD UNIFIED SOC"
    
    echo -e "${YELLOW}Position initiale: $(pwd)${NC}"
    echo -e "${YELLOW}Localisation d√©tect√©e: $(detect_location)${NC}"
    
    # Sauvegarder la position de d√©part
    local start_dir=$(pwd)
    
    # Tests de navigation
    test_from_root
    cd "$start_dir"
    
    test_from_scripts  
    cd "$start_dir"
    
    test_backups_creation
    cd "$start_dir"
    
    test_automation_scripts
    cd "$start_dir"
    
    print_header "R√âSUM√â DES TESTS"
    print_success "Tests de navigation intelligente termin√©s"
    print_info "Position finale: $(pwd)"
    
    echo ""
    echo -e "${BLUE}üìã RECOMMANDATIONS:${NC}"
    echo -e "${YELLOW} ‚Ä¢ Ex√©cutez les scripts depuis la racine du projet${NC}"
    echo -e "${YELLOW} ‚Ä¢ Les scripts naviguent automatiquement vers les bons dossiers${NC}"
    echo -e "${YELLOW} ‚Ä¢ La navigation intelligente fonctionne depuis n'importe o√π${NC}"
}

# Ex√©cution du script principal
main "$@"
